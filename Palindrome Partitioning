class Solution {
    public List<List<String>> partition(String s) {
        List<String> list = new ArrayList<String>();
        List<List<String>> finalList = new ArrayList<List<String>>();
        solve(s,list,finalList);
        return finalList;
        
    }
    public void solve(String s, List<String> list, List<List<String>> finalList){
        
        if(s.isEmpty()){
            finalList.add(list);
            return;
        }
        for(int i=1; i<=s.length(); i++){
            String left = s.substring(0,i);
            String  right = s.substring(i);
            if(isPalindrome(left)){
                
                List<String> copyList = new ArrayList<String>(list);
              
               copyList.add(left);
              
                solve(right,copyList,finalList);
               
               
            }
        
        }
        
    }
    public boolean isPalindrome(String left){
        int i=0;
        int j=left.length()-1;
        while(i<=j){
            if(left.charAt(i)!=left.charAt(j)){
                return false;
            }
            i++;
            j--;
           
        }
        return true;
    }
}
